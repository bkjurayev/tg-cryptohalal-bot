const { Telegraf, Markup, session } = require('telegraf');
const { default: axios } = require('axios');
const fs = require('fs');

const bot = new Telegraf(process.env.TOKEN, { polling: true });
bot.use(session({
    defaultSession: () => ({
        lang: null,
    }),
}));
bot.telegram.setMyCommands([
    { command: '/start', description: 'Start' },
    { command: '/privacy', description: 'Privacy' },
])


// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let coins = JSON.parse(fs.readFileSync('tickers.json', 'utf-8'));
let usersJson = JSON.parse(fs.readFileSync('users.json', 'utf-8'))
const date = new Date();

// –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.start(async (ctx) => {
    const chatId = ctx.chat.id;
    const name = ctx.chat.username ? ctx.chat.username : ctx.chat.first_name
    const createdAt = date
    let checkUser = await usersJson.find(el => el.chatId == chatId)
    
    axios
        .post('https://api.telegram.org/bot5336070499:AAFrn3cc5vInWMLnqbqHB7uC9BZRuxXk7dE/sendMessage', {
            chat_id: -1001792646372,
            parse_mode: "html",
            text: `Username: ‚§µÔ∏è \nüî∏${name} \n\nChat ID: ‚§µÔ∏è \nüîπ${chatId} \n\nDate: ‚§µÔ∏è \n‚è≥${createdAt}`,
        })
        .then(() => {
            console.log('Yangi foydalanuvchi');
        }).catch((error) => {
            console.log('Error while sending to TG', error);
        })

    if (checkUser) {
        console.log('Bu user allaqachon bazada bor');
    } else {
        // –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ JSON
        // –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
        const data = {
            "name": ctx.chat.username ? ctx.chat.username : ctx.chat.first_name,
            "chatId": chatId,
            "action": "start",
            "quanttityUsing": "1",
            "language": "",
            "createdAt": date
        }
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        usersJson.push(data);
        // –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        fs.writeFile('users.json', JSON.stringify(usersJson, null, 2), { encoding: 'utf8', flag: 'w' }, (err) => {
            if (err) throw err;
            console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
        })
    }

    ctx.session = {};
    ctx.session.route = 'lang';
    await ctx.reply(
        'SELECT LANGUAGE',
        Markup.inlineKeyboard([
            [
                Markup.button.callback('üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', 'lang:sa'),
                Markup.button.callback('üá¨üáß English', 'lang:en')
            ],
            [
                Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang:ru'),
                Markup.button.callback("üá∫üáø O'zbekcha", 'lang:uz')
            ]
        ])
    );
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
bot.action(/lang:(.+)/, async (ctx) => {
    const chatId = ctx.chat.id;
    let checkUser = await usersJson.find(el => el.chatId == chatId)

    const lang = ctx.match[1];
    ctx.session.lang = lang;

    ctx.session.route = 'home';

    ctx.session.lastMessageId = ctx.update.callback_query.message.message_id;

    if (checkUser.language == '') {
        await usersJson.map(el => {
            if (el.chatId == chatId && el.language == '') {
                el.language = ctx.session.lang
                console.log('Added user language');
            } else {
                return
            }
        })
        fs.writeFile('users.json', JSON.stringify(usersJson, null, 2), { encoding: 'utf8', flag: 'w' }, (err) => {
            if (err) throw err;
            console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
        })
    }


    await homeMessageBuilder(ctx);
});
// –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function homeMessageBuilder(ctx) {
    const lang = ctx.session.lang || 'uz';
    try {
        await ctx.editMessageText(
            {
                'uz': 'üè† Asosiy menu',
                'ru': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                'en': 'üè† Main menu',
                'sa': 'üè† ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©'
            }[lang],
            Markup.inlineKeyboard([
                [Markup.button.callback({
                    'uz': 'Kriptovalyutalar hukmini tekshrish üîç',
                    'ru': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç üîç',
                    'en': 'Checking Cryptocurrency üîç',
                    'sa': 'ŸÅÿ≠ÿµ ÿßŸÑÿπŸÖŸÑÿßÿ™ ÿßŸÑÿ±ŸÇŸÖŸäÿ© üîç'
                }[lang], 'research')],
                [Markup.button.callback({
                    'uz': 'Akademiya üìö',
                    'ru': '–°—Ç–∞—Ç—å–∏ üìö',
                    'en': 'Articles üìö',
                    'sa': 'ŸÖŸÇÿßŸÑÿßÿ™ üìö'
                }[lang], 'articles')]
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
bot.action('research', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'research';
    ctx.session.lastMessageId = ctx.update.callback_query.message.message_id;

    await researchMessageBuilder(ctx);
});
// –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
async function researchMessageBuilder(ctx) {
    const lang = ctx.session.lang || 'uz';

    const bigtexts = {
        'uz': "Assalomu alaykum, üîéChecking Cryptocurrency botiga hush kelibsiz! \n\nBiz SharLife, CryptoHalol va CryptoIslam ma'muriyatlari fatvosiga tayanamiz. Ushbu botda kriptovalyutalar bo'yicha ma'lumotlar ham yuqoridagi manbalardan olinadi. Nima uchun biz aynan shu manbalarni tanladik? \n\n<a href='https://telegra.ph/About-us---SharLife-06-22'>üìåUstaz Ahmad Fawwaz</a> \n\nUstoz Ahmad Fawwaz Sharlife Shariat qo'mitasi raisi, u shariat bo'yicha sertifikatlangan maslahatchi va Islom moliya institutlarining buxgalteriya hisobi va audit tashkiloti (AAOIFI) auditoridir. Shariat bo'yicha tajribaga ega Ahmad Fauvaz ustoz Malayziya bo'ylab turli Islom moliya institutlari va davlat diniy idoralari xodimlari uchun treninglar o'tkazadi. Uning ta'siri mahalliy radio va televizion stantsiyalarga taalluqlidir, u yerda u tez-tez fiqh va usulul-fiqh (Islom huquqshunosligi) bo'yicha bilimlarini baham ko'radi. \n\n<a href='https://telegra.ph/DoktorMuhammadAbuJazar-06-23'>üìåDoktor Muhammad Abu Jazar qo'mitasi</a> \nCryptoHalal - kriptovalyuta sohasida eng birinchi qo'mita hisoblanadi, u doktor Muhammad Abu Jazar tomonidan asos solingan. \n\nüìãSharLife va CryptoHalal \nSharlife va CryptoHalal kriptovalyutalar hukmini tekshirish algoritmi juda o'hshash, lekin orada bir kriptovalyuta bo'yicha birida halol ikkinchisida harom degan fatvoni uchratishimiz mumkin. Oxirgi vaqtlarda G'azoda bo'layotgan hodisalar tufayli CryptoHalal o'z faoliyatini qisman to'htatgan, shuning uchun ba'zi kriptovalyutalar bo'yicha ma'lumotlar yangilanmagan bo'lishi mumkin. Biz ushbu holatda kriptovalyutalar bo'yicha chiqqan eng oxirgi fatvoni olishingizni tavsiya etamiz. \n\n<a href='https://telegra.ph/CryptoIslam-06-23'>üìåKriptoIslam haqida bu yerda batafsil ma'lumotga ega bo'ling: telegra.ph</a>",
        'ru': "–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ üîéChecking Cryptocurrency. \n\n–ú—ã –æ–ø–∏—Ä–∞–µ–º—Å—è –Ω–∞ —Ñ–µ—Ç–≤—ã –æ—Ç –®–∞—Ä–ª–∞–π—Ñ, –ö—Ä–∏–ø—Ç–æ—Ö–∞–ª—è–ª—å –∏ –ö—Ä–∏–ø—Ç–æ–ò—Å–ª–∞–º. –í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–µ—Ç–∞—Ö —Ç–∞–∫–∂–µ —Å–æ–±—Ä–∞–Ω–∞ –∏–∑ —ç—Ç–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. \n\n–ü–æ—á–µ–º—É –º—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏? \n\n<a href='https://telegra.ph/About-us---SharLife-06-22'>üìåUstaz Ahmad Fawwaz</a> \n–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å —à–∞—Ä–∏–∞—Ç—Å–∫–æ–≥–æ –∫–æ–º–∏—Ç–µ—Ç–∞ –®–∞—Ä–ª–∞–π—Ñ, –æ–Ω —è–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –ø–æ —à–∞—Ä–∏–∞—Ç—É –∏ –∞—É–¥–∏—Ç–æ—Ä–æ–º –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–≥–æ —É—á–µ—Ç–∞ –∏ –∞—É–¥–∏—Ç–∞ –∏—Å–ª–∞–º—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤ (AAOIFI). –£—Å—Ç–∞–∑ –ê—Ö–º–∞–¥ –§–∞—É–≤–∞–∑, –∏–º–µ—é—â–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏ —à–∞—Ä–∏–∞—Ç–∞, –ø—Ä–æ–≤–æ–¥–∏—Ç –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å–ª–∞–º—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤ –ø–æ –≤—Å–µ–π –ú–∞–ª–∞–π–∑–∏–∏. –ï–≥–æ –≤–ª–∏—è–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–Ω—ã–µ —Ä–∞–¥–∏–æ- –∏ —Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏, –≥–¥–µ –æ–Ω —á–∞—Å—Ç–æ –¥–µ–ª–∏—Ç—Å—è –∑–Ω–∞–Ω–∏—è–º–∏ –ø–æ —Ñ–∏–∫—Ö—É –∏ —É—Å—É–ª —Ñ–∏–∫—Ö—É (–∏—Å–ª–∞–º—Å–∫–æ–π —é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏–∏). \n\n<a href='https://telegra.ph/HalalCrypto-06-23'>üìå–ö–æ–º–∏—Ç–µ—Ç –î–æ–∫—Ç–æ—Ä –ú—É—Ö–∞–º–º–∞–¥ –ê–±—É –î–∂–∞–∑–∞—Ä–∞</a> \n\nCryptoHalal ‚Äî —ç—Ç–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∫–æ–º–∏—Ç–µ—Ç –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—Ç–æ—Ä–æ–º –ú—É—Ö–∞–º–º–∞–¥–æ–º –ê–±—É –î–∂–∞–∑–∞—Ä–æ–º. \n\nüìã–®–∞—Ä–ª–∞–π—Ñ –∏ CryptoHalal –ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω–µ—Ç –®–∞—Ä–ª–∞–π—Ñ –∏ –ö—Ä–∏–ø—Ç–æ—Ö–∞–ª—è–ª—å —Å—Ö–æ–∂–∏, –Ω–æ –∏–Ω–æ–≥–¥–∞ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –º–æ–Ω–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–Ω–æ–π –≤ –æ–¥–Ω–æ–º –∫–æ–º–∏—Ç–µ—Ç–µ –∏ —Ö–∞—Ä–∞–º–Ω–æ–π –≤ –¥—Ä—É–≥–æ–º. –ò–∑-–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ –ì–∞–∑–µ –ö—Ä–∏–ø—Ç–æ—Ö–∞–ª—è–ª—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Ö –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±—Ä–∞—Ç—å –±–æ–ª–µ–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–µ—Ç–≤—ã –ø–æ –º–æ–Ω–µ—Ç–∞–º. \n\n<a href='https://telegra.ph/CryptoIslam-06-23'>üìå–û –ö—Ä–∏–ø—Ç–æ–ò—Å–ª–∞–º–µ —á–∏—Ç–∞–π—Ç–µ –∑–¥–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ: telegra.ph</a>",
        'en': "Assalamu alaikum, you are welcomed by the üîéChecking Cryptocurrency project team. \n\nWe rely on fatwas from Sharlife, Crypto Halal and CryptoIslam. In this bot, information about coins is also collected from these sources. \n\nWhy did we choose these particular sources? \n\nüìå<a href='https://telegra.ph/About-us---SharLife-06-22'>Ustaz Agmad Fawwaz</a> \nThe Chairman of the Sharia Sharia Committee, he is a certified Sharia consultant and auditor of the Organization of Accounting and Auditing of Islamic Financial Institutions (AAOIFI). Ustaz Ahmad Fauwaz, who has experience in the field of Sharia, conducts training for employees of various Islamic financial institutions and state religious bodies throughout Malaysia. His influence extends to local radio and television stations, where he often shares knowledge on Fiqh and usul Fiqh (Islamic jurisprudence). \nüìå<a href='https://telegra.ph/Dr-Mohammad-AboDjazar-06-23'>The Committee of Dr. Muhammad Abu Jazar</a> \nCryptoHalal is the very first committee in the field of cryptocurrencies, founded by Dr. Muhammad Abu Jazar. \n\nüìãSharlife and CryptoHalal The algorithms for checking the coins of Sharlife and Cryptohalal are similar, but sometimes the same coin can be recognized as permissible in one committee and illegal in another. Due to the recent events in Gaza, Crypto Halal has suspended its activities, so some of their data may not be updated. We recommend taking more recent fatwas on coins. \n\n<a href='https://telegra.ph/CryptoIslam-06-23-2'>üìåRead more about CryptoIslam here: telegra.ph</a>",
        'sa': "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸá Ÿàÿ®ÿ±ŸÉÿßÿ™Ÿáÿå ŸÜÿ±ÿ≠ÿ® ÿ®ŸÉŸÖ ŸÅŸä ŸÅÿ±ŸäŸÇ ŸÖÿ¥ÿ±Ÿàÿπ üîé Checking Cryptocurrency.  \n\nŸÜÿ≠ŸÜ ŸÜÿπÿ™ŸÖÿØ ÿπŸÑŸâ ŸÅÿ™ÿßŸàŸâ ŸÖŸÜ Sharlife Ÿà Crypto Halal Ÿà CryptoIslam. ŸÅŸä Ÿáÿ∞ÿß ÿßŸÑÿ®Ÿàÿ™ÿå Ÿäÿ™ŸÖ ÿ£Ÿäÿ∂Ÿãÿß ÿ¨ŸÖÿπ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ≠ŸàŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ™ ŸÖŸÜ Ÿáÿ∞Ÿá ÿßŸÑŸÖÿµÿßÿØÿ±. \n\n ŸÑŸÖÿßÿ∞ÿß ÿßÿÆÿ™ÿ±ŸÜÿß Ÿáÿ∞Ÿá ÿßŸÑŸÖÿµÿßÿØÿ± ÿ®ÿßŸÑÿ™ÿ≠ÿØŸäÿØÿü \n\nüìå<a href='https://telegra.ph/About-us---SharLife-06-22'>Ustaz Agmad Fawwaz</a> \nÿ±ÿ¶Ÿäÿ≥ ŸÑÿ¨ŸÜÿ© ÿßŸÑÿ¥ÿ±Ÿäÿπÿ©ÿå ŸàŸáŸà ŸÖÿ≥ÿ™ÿ¥ÿßÿ± ÿ¥ÿ±ÿπŸä ŸÖÿπÿ™ŸÖÿØ ŸàŸÖÿØŸÇŸÇ ÿ≠ÿ≥ÿßÿ®ÿßÿ™ ŸÑÿØŸâ ŸáŸäÿ¶ÿ© ÿßŸÑŸÖÿ≠ÿßÿ≥ÿ®ÿ© ŸàÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ© ŸÑŸÑŸÖÿ§ÿ≥ÿ≥ÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ© ÿßŸÑÿ•ÿ≥ŸÑÿßŸÖŸäÿ© (AAOIFI). ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞ ÿ£ÿ≠ŸÖÿØ ŸÅŸàÿßÿ≤ÿå ÿßŸÑÿ∞Ÿä Ÿäÿ™ŸÖÿ™ÿπ ÿ®ÿÆÿ®ÿ±ÿ© ŸÅŸä ŸÖÿ¨ÿßŸÑ ÿßŸÑÿ¥ÿ±Ÿäÿπÿ©ÿå ŸäÿØŸäÿ± ÿ™ÿØÿ±Ÿäÿ®Ÿãÿß ŸÑŸÖŸàÿ∏ŸÅŸä ÿßŸÑŸÖÿ§ÿ≥ÿ≥ÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ© ÿßŸÑÿ•ÿ≥ŸÑÿßŸÖŸäÿ© ÿßŸÑŸÖÿÆÿ™ŸÑŸÅÿ© ŸàÿßŸÑŸáŸäÿ¶ÿßÿ™ ÿßŸÑÿØŸäŸÜŸäÿ© ÿßŸÑÿ≠ŸÉŸàŸÖŸäÿ© ŸÅŸä ÿ¨ŸÖŸäÿπ ÿ£ŸÜÿ≠ÿßÿ° ŸÖÿßŸÑŸäÿ≤Ÿäÿß. ŸàŸäŸÖÿ™ÿØ ÿ™ÿ£ÿ´Ÿäÿ±Ÿá ÿ•ŸÑŸâ ŸÖÿ≠ÿ∑ÿßÿ™ ÿßŸÑÿ•ÿ∞ÿßÿπÿ© ŸàÿßŸÑÿ™ŸÑŸÅÿ≤ŸäŸàŸÜ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©ÿå ÿ≠Ÿäÿ´ Ÿäÿ¥ÿßÿ±ŸÉ ÿ∫ÿßŸÑÿ®Ÿãÿß ÿßŸÑŸÖÿπÿ±ŸÅÿ© ÿ≠ŸàŸÑ ÿßŸÑŸÅŸÇŸá Ÿàÿ£ÿµŸàŸÑ ÿßŸÑŸÅŸÇŸá (ÿßŸÑŸÅŸÇŸá ÿßŸÑÿ•ÿ≥ŸÑÿßŸÖŸä). \nüìå<a href='https://telegra.ph/Dr-Mohammad-AboDjazar-06-23'>The Committee of Dr. Muhammad Abu Jazar</a> \nŸÉÿ±Ÿäÿ®ÿ™Ÿà ÿ≠ŸÑÿßŸÑ ŸáŸä ÿ£ŸàŸÑ ŸÑÿ¨ŸÜÿ© ŸÅŸä ŸÖÿ¨ÿßŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ™ ÿßŸÑŸÖÿ¥ŸÅÿ±ÿ©ÿå ÿ£ÿ≥ÿ≥Ÿáÿß ÿßŸÑÿØŸÉÿ™Ÿàÿ± ŸÖÿ≠ŸÖÿØ ÿ£ÿ®Ÿà ÿ¨ÿ≤ÿ±. \nüìãSharlife ŸàCryptoHalal ÿ•ŸÜ ÿÆŸàÿßÿ±ÿ≤ŸÖŸäÿßÿ™ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿπŸÖŸÑÿßÿ™ Sharlife ŸàCryptoHalal ŸÖÿ™ÿ¥ÿßÿ®Ÿáÿ©ÿå ŸàŸÑŸÉŸÜ ŸÅŸä ÿ®ÿπÿ∂ ÿßŸÑÿ£ÿ≠ŸäÿßŸÜ ŸäŸÖŸÉŸÜ ÿßÿπÿ™ÿ®ÿßÿ± ŸÜŸÅÿ≥ ÿßŸÑÿπŸÖŸÑÿ© ŸÖÿ≥ŸÖŸàÿ≠ ÿ®Ÿáÿß ŸÅŸä ŸÑÿ¨ŸÜÿ© Ÿàÿ∫Ÿäÿ± ŸÇÿßŸÜŸàŸÜŸäÿ© ŸÅŸä ŸÑÿ¨ŸÜÿ© ÿ£ÿÆÿ±Ÿâ. Ÿàÿ®ÿ≥ÿ®ÿ® ÿßŸÑÿ£ÿ≠ÿØÿßÿ´ ÿßŸÑÿ£ÿÆŸäÿ±ÿ© ŸÅŸä ÿ∫ÿ≤ÿ©ÿå ÿ£ŸàŸÇŸÅÿ™ CryptoHalal ÿ£ŸÜÿ¥ÿ∑ÿ™Ÿáÿßÿå ŸÑÿ∞ÿß ŸÇÿØ ŸÑÿß Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿ®ÿπÿ∂ ÿ®ŸäÿßŸÜÿßÿ™Ÿáÿß. ŸÜŸàÿµŸä ÿ®ÿ£ÿÆÿ∞ ŸÅÿ™ÿßŸàŸâ ÿ£ÿ≠ÿØÿ´ ÿ®ÿ¥ÿ£ŸÜ ÿßŸÑÿπŸÖŸÑÿßÿ™. \n\n<a href='https://telegra.ph/CryptoIslam-06-23-2'>üìåRead more about CryptoIslam here: telegra.ph</a>",
    }
    const bigtext = bigtexts[lang];

    // Define the inline keyboard markup based on the language
    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    try {
        await ctx.replyWithHTML(bigtext)
        // Send the message with the inline keyboard
        await ctx.reply(
            {
                'uz': "ü§ñ Botga siz izlamoqchi bo'lgan token tikerini yozing \n‚úÖ Misol uchun: \nüî∏ Bitcoin - tikeri esa: BTC",
                'ru': "ü§ñ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤ –±–æ—Ç–µ. \n‚úÖ –ù–∞–ø—Ä–∏–º–µ—Ä: \nüî∏ Bitcoin - —Ç–∏–∫–µ—Ä: BTC",
                'en': "ü§ñ Write the Token ticker you are looking for on the bot. \n‚úÖ For example: \nüî∏ Bitcoin - ticker: BTC",
                'sa': "ü§ñ ÿ£ÿØÿÆŸÑ ÿ¥ÿ±Ÿäÿ∑ ÿßŸÑÿ±ŸÖÿ≤ ÿßŸÑŸÖŸÖŸäÿ≤ ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸäŸá ŸÅŸä ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™.  \n‚úÖ ÿπŸÑŸâ ÿ≥ÿ®ŸäŸÑ ÿßŸÑŸÖÿ´ÿßŸÑ: \nüî∏ Bitcoin - ÿ®Ÿäÿ™ŸÉŸàŸäŸÜ ÿ¥ÿ±Ÿäÿ∑: BTC"
            }[lang], Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'home')],
            ])
        );
    } catch (error) {
        console.log('Error while start finding coins', error);
    }
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
bot.action('articles', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'articles';
    ctx.session.lastMessageId = ctx.update.callback_query.message.message_id;

    await articlesMessageBuilder(ctx);
});
// –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
async function articlesMessageBuilder(ctx) {
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    try {
        await ctx.editMessageText(
            {
                'uz': 'üîò –é–∑–∏–Ω–≥–∏–∑–≥–∞ –∫–µ—Ä–∞–∫–ª–∏ –º–∞“õ–æ–ª–∞–Ω–∏ —û“õ–∏—à —É—á—É–Ω –º–∞–≤–∑—É —Ç—É–≥–º–∞—Å–∏–≥–∞ –±–æ—Å–∏–Ω–≥:',
                'ru': 'üîò –ß—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω—É–∂–Ω—É—é –≤–∞–º —Å—Ç–∞—Ç—å—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–º–æ–π:',
                'en': 'Articles üìö',
                'sa': 'ŸÖŸÇÿßŸÑÿßÿ™ üìö'
            }[lang],
            Markup.inlineKeyboard([
                [Markup.button.callback({
                    'uz': '–ê—Ä–±–∏—Ç—Ä–∞–∂ “≥–∞–ª–æ–ª–º–∏?',
                    'ru': '–ê—Ä–±–∏—Ç—Ä–∞–∂ —Ö–∞–ª—è–ª—å?',
                    'en': '',
                    'sa': ''
                }[lang], 'arbitraj')],
                [Markup.button.callback({
                    'uz': '“≤–∞–º–∫–æ—Ä–ª–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —Ö—É–∫–º–∏–≥–∞ —Ç–∞—ä—Å–∏—Ä “õ–∏–ª–∞–¥–∏–º–∏?',
                    'ru': '–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞ –∏ —à–∞—Ä–∏–∞—Ç—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–µ—Ç',
                    'en': '',
                    'sa': ''
                }[lang], 'partner')],
                [Markup.button.callback({
                    'uz': '–ú–∞—Ä–∂–∏–Ω–∞–ª —Å–∞–≤–¥–æ –≤–∞ —Ñ—å—é—á–µ—Ä—Å–ª–∞—Ä “≥–∞–ª–æ–ª–º–∏?',
                    'ru': '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∏ —Ñ—å—é—á–µ—Ä—Å—ã —Ö–∞–ª—è–ª—å?',
                    'en': '',
                    'sa': ''
                }[lang], 'feature')],
                [Markup.button.callback({
                    'uz': '–ú–µ–º-—Ç–æ–∫–µ–Ω–ª–∞—Ä–¥–∞–Ω —ç“≥—Ç–∏—ë—Ç –±—û–ª–∏–Ω–≥',
                    'ru': '–ò–∑–±–µ–≥–∞–π—Ç–µ –º–µ–º-–º–æ–Ω–µ—Ç',
                    'en': '',
                    'sa': ''
                }[lang], 'memtokens')],
                [Markup.button.callback({
                    'uz': '–ê–∏—Ä–¥—Ä–æ–ø “≥–∞–ª–æ–ª–º–∏?',
                    'ru': '–ê–∏—Ä–¥—Ä–æ–ø —Ö–∞–ª—è–ª—å?',
                    'en': '',
                    'sa': ''
                }[lang], 'airdrop')],
                [Markup.button.callback({
                    'uz': 'PoS –≤–∞ –±–æ—à“õ–∞ —Å—Ç–µ–π–∫–∏–Ω–≥ —Ç—É—Ä–ª–∞—Ä–∏',
                    'ru': 'PoS –∏ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã —Å—Ç–µ–π–∫–∏–Ω–≥–∞',
                    'en': '',
                    'sa': ''
                }[lang], 'pos')],
                [Markup.button.callback({
                    'uz': '–†–∞“õ–∞–º–ª–∏ –≤–∞–ª—é—Ç–∞–ª–∞—Ä–¥–∞–≥–∏ –∑–∞–∫–æ—Ç',
                    'ru': '–ó–∞–∫—è—Ç –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –º–∏—Ä–µ',
                    'en': '',
                    'sa': ''
                }[lang], 'zakot')],
                [Markup.button.callback({
                    'uz': '–û–ª—Ç–∏–Ω ‚Äî –ò—Å–ª–æ–º –≤–∞–ª—é—Ç–∞—Å–∏–º–∏?',
                    'ru': '–ó–æ–ª–æ—Ç–æ –∫–∞–∫ –≤–∞–ª—é—Ç–∞ –ò—Å–ª–∞–º–∞',
                    'en': '',
                    'sa': ''
                }[lang], 'oltin')],
                [Markup.button.callback({
                    'uz': 'T2E —û–π–∏–Ω–ª–∞—Ä–∏ “≥—É–∫–º–∏',
                    'ru': 'T2E-—Ç–∞–ø–∞–ª–∫–∏ –∏ —à–∞—Ä–∏–∞—Ç',
                    'en': '',
                    'sa': ''
                }[lang], 't2egame')],
                [Markup.button.callback({
                    'uz': '–ë–æ–π–∫–æ—Ç —Ä—û–π—Ö–∞—Ç–∏–¥–∞–≥–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–ª–∞—Ä',
                    'ru': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –±–æ–π–∫–æ—Ç-–ª–∏—Å—Ç–µ',
                    'en': '',
                    'sa': ''
                }[lang], 'baykot')],
                [Markup.button.callback({
                    'uz': '–°—Ç–µ–π–±–ª–∫–æ–∏–Ω–ª–∞—Ä: –±–∞—Ä—á–∞—Å–∏ “≥–∞–ª–æ–ª–º–∏?',
                    'ru': '–°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã: –≤—Å–µ –ª–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ã?',
                    'en': '',
                    'sa': ''
                }[lang], 'stablekoins')],
                [Markup.button.callback({
                    'uz': '“≤–∞—Ä–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–ª–∞—Ä–¥–∞–Ω —Å–∞—Ä–º–æ—è–Ω–∏ —Ç–æ–∑–∞–ª–∞—à',
                    'ru': '–û—á–∏—â–µ–Ω–∏–µ –æ—Ç —Ö–∞—Ä–∞–º-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
                    'en': '',
                    'sa': ''
                }[lang], 'clearinvest')],
                [Markup.button.callback({
                    'uz': '–ú–µ–º-—Ç–æ–∫–µ–Ω–ª–∞—Ä “≥–∞–ª–æ–ª–º–∏ | –ú—É—Ñ—Ç–∏–π –§–∞—Ä–∞–∑ –ê–¥–∞–º',
                    'ru': '–Ø–≤–ª—è—é—Ç—Å—è –ª–∏ –º–µ–º-—Ç–æ–∫–µ–Ω—ã —Ö–∞–ª—è–ª—å–Ω—ã–º–∏ | –ú—É—Ñ—Ç–∏ –§–∞—Ä–∞–∑ –ê–¥–∞–º',
                    'en': '',
                    'sa': ''
                }[lang], 'muftiyfazar')],
                [Markup.button.callback(buttonText, 'home')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }

    // const bigtexts = {
    //     'uz': "–ê—Ä–±–∏—Ç—Ä–∞–∂ —Å–∞–≤–¥–æ—Å–∏ —à–∞—Ä—ä–∏–π “≥—É–∫–º–∏–≥–∞ –±–æ“ì–ª–∏“õ –º–∞“õ–æ–ª–∞–Ω–∏ “õ—û–π–∏–¥–∞–≥–∏ –ª–∏–Ω–∫ –æ—Ä“õ–∞–ª–∏ —û“õ–∏–± —á–∏“õ–∏–Ω–≥: \nhttps://telegra.ph/Arbitrage-savdosining-shariy-hukmi-07-29",
    //     'ru': "–°—Ç–∞—Ç—å—è - –æ –¥–æ–∑–≤–æ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: \nhttps://telegra.ph/Article-on-the-halal-of-arbitrage-07-29",
    //     'en': "Check out the Sharlife article dedicated to the topic of arbitrage: \nhttps://sharlife.my/article/content/is-arbitrage-trading-halal ",
    //     'sa': "ÿßÿ∑ŸÑÿπ ÿπŸÑŸâ ŸÖŸÇÿßŸÑ ÿ¥ÿßÿ±ŸÑÿßŸäŸÅ ÿßŸÑŸÖÿÆÿµÿµ ŸÑŸÖŸàÿ∂Ÿàÿπ ÿßŸÑÿ™ÿ≠ŸÉŸäŸÖ: \nhttps://sharlife.my/article/content/is-arbitrage-trading-halal ",
    // }
    // const bigtexts2 = {
    //     'uz': "'–ö—Ä–∏–ø—Ç–æ-–ª–æ–π–∏“≥–∞–ª–∞—Ä –æ—Ä–∞—Å–∏–¥–∞–≥–∏ “≥–∞–º–∫–æ—Ä–ª–∏–∫ –ª–æ–π–∏“≥–∞–Ω–∏–Ω–≥ —à—É–±“≥–∞–ª–∏ –±—û–ª–∏—à–∏–≥–∞ —Å–∞–±–∞–± –±—û–ª–∞–¥–∏–º–∏' –Ω–æ–º–ª–∏–∫ –º–∞“õ–æ–ª–∞–Ω–∏ —û“õ–∏–± —á–∏“õ–∏–Ω–≥: \nhttps://telegra.ph/ArticleSharlifemyuz-09-03",
    //     'ru': "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å—Ç–∞—Ç—å–µ–π –æ –≤–ª–∏—è–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤ –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–∞–º–∏ –Ω–∞ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–∞–ª—è–ª—å–Ω–æ—Å—Ç–∏: \nhttps://telegra.ph/ArticleSharlifemy-09-03",
    //     'en': "Read the article about the impact of partnerships between crypto projects on their compliance with halal principles: \nhttps://sharlife.my/article/content/How_Halal_and_Haram_Crypto_Partnerships_Affect_Shariah_Compliance",
    //     'sa': "Read the article about the impact of partnerships between crypto projects on their compliance with halal principles: \nhttps://sharlife.my/article/content/How_Halal_and_Haram_Crypto_Partnerships_Affect_Shariah_Compliance",
    // }
    // const bigtexts3 = {
    //     'uz': "'–ù–∏–º–∞ —É—á—É–Ω —Ñ—å—é—á–µ—Ä—Å –≤–∞ –º–∞—Ä–∂–∞ —Å–∞–≤–¥–æ–ª–∞—Ä–∏ “≥–∞—Ä–æ–º “≥–∏—Å–æ–±–ª–∞–Ω–∞–¥–∏' –Ω–æ–º–ª–∏ –º–∞“õ–æ–ª–∞–Ω–∏ “õ—û–π–∏–¥–∞–≥–∏ –ª–∏–Ω–∫ –æ—Ä“õ–∞–ª–∏ —û“õ–∏–± —á–∏“õ–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω: \nhttps://telegra.ph/Article2Sharlifemyuz-09-03",
    //     'ru': "–ü–æ—á–µ–º—É –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∏ —Ç–æ—Ä–≥–æ–≤–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è —Ö–∞—Ä–∞–º? \nhttps://telegra.ph/Article2sharlifemy-09-03",
    //     'en': "Why is Leverage and Margin Trading Considered Haram? \nhttps://sharlife.my/article/content/why-is-leverage-and-margin-trading-considered-haram",
    //     'sa': "Why is Leverage and Margin Trading Considered Haram? \nhttps://sharlife.my/article/content/why-is-leverage-and-margin-trading-considered-haram",
    // }
    // const bigtexts4 = {
    //     'uz': "–ú–µ–º-—Ç–æ–∫–µ–Ω–ª–∞—Ä–Ω–∏ –°–æ—Ç–∏–± –û–ª–∏—à–¥–∞–Ω –≠“≥—Ç–∏—ë—Ç –±—û–ª–∏–Ω–≥ \nhttps://telegra.ph/Avoid-Buying-Meme-Coins---SharLifemy-09-03",
    //     'ru': "–ò–∑–±–µ–≥–∞–π—Ç–µ –ü–æ–∫—É–ø–∫–∏ –ú–µ–º-–º–æ–Ω–µ—Ç \nhttp://www.telegra.ph/Hukm-mem-koinov-Sharlife-07-08",
    //     'en': "Avoid Buying Meme Coins \nhttps://sharlife.my/article/content/avoid-buying-meme-coins",
    //     'sa': "Avoid Buying Meme Coins \nhttps://sharlife.my/article/content/avoid-buying-meme-coins",
    // }
    // const bigtexts5 = {
    //     'uz': "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∞–∏—Ä–¥—Ä–æ–ø–∏ “≥–∞–ª–æ–ª–º–∏? \nhttps://telegra.ph/Is-Cryptocurrency-Airdrop-Halal-08-09",
    //     'ru': "–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞–∑–¥–∞—á–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Ö–∞–ª—è–ª—å–Ω–æ–π? (–ê–∏—Ä–¥—Ä–æ–ø—ã) \nhttps://telegra.ph/Is-Cryptocurrency-Airdrop-Halal-07-29",
    //     'en': "Is Cryptocurrency Airdrop Halal? \nhttps://sharlife.my/article/content/is-cryptocurrency-airdrop-halal",
    //     'sa': "Is Cryptocurrency Airdrop Halal? \nhttps://sharlife.my/article/content/is-cryptocurrency-airdrop-halal",
    // }
    // const bigtext = bigtexts[lang];
    // const bigtext2 = bigtexts2[lang];
    // const bigtext3 = bigtexts3[lang];
    // const bigtext4 = bigtexts4[lang];
    // const bigtext5 = bigtexts5[lang];

    // // Define the inline keyboard markup based on the language
    // const buttonLabels = {
    //     'uz': 'üîô Orqaga',
    //     'ru': 'üîô –ù–∞–∑–∞–¥',
    //     'en': 'üîô Back',
    //     'sa': 'üîô ÿÆŸÑŸÅ',
    // };
    // const buttonText = buttonLabels[lang];

    // try {
    //     await ctx.replyWithHTML(bigtext)
    //     await ctx.replyWithHTML(bigtext2)
    //     await ctx.replyWithHTML(bigtext3)
    //     await ctx.replyWithHTML(bigtext4)
    //     await ctx.replyWithHTML(bigtext5)
    // } catch (error) {
    //     console.log('Error while showing article', error);
    // }
}
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('arbitraj', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'arbitraj';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];
    
    const bigtexts = {
        'uz': "–ê—Ä–±–∏—Ç—Ä–∞–∂ —Å–∞–≤–¥–æ—Å–∏ —à–∞—Ä—ä–∏–π “≥—É–∫–º–∏–≥–∞ –±–æ“ì–ª–∏“õ –º–∞“õ–æ–ª–∞–Ω–∏ “õ—û–π–∏–¥–∞–≥–∏ –ª–∏–Ω–∫ –æ—Ä“õ–∞–ª–∏ —û“õ–∏–± —á–∏“õ–∏–Ω–≥: \nhttps://telegra.ph/Arbitrage-savdosining-shariy-hukmi-07-29",
        'ru': "–°—Ç–∞—Ç—å—è - –æ –¥–æ–∑–≤–æ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: \nhttps://telegra.ph/Article-on-the-halal-of-arbitrage-07-29",
        'en': "Check out the Sharlife article dedicated to the topic of arbitrage: \nhttps://sharlife.my/article/content/is-arbitrage-trading-halal ",
        'sa': "ÿßÿ∑ŸÑÿπ ÿπŸÑŸâ ŸÖŸÇÿßŸÑ ÿ¥ÿßÿ±ŸÑÿßŸäŸÅ ÿßŸÑŸÖÿÆÿµÿµ ŸÑŸÖŸàÿ∂Ÿàÿπ ÿßŸÑÿ™ÿ≠ŸÉŸäŸÖ: \nhttps://sharlife.my/article/content/is-arbitrage-trading-halal ",
    }
    const bigtext = bigtexts[lang];
    try {
        // await ctx.replyWithHTML(bigtext);   
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
     
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('partner', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'partner';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "'–ö—Ä–∏–ø—Ç–æ-–ª–æ–π–∏“≥–∞–ª–∞—Ä –æ—Ä–∞—Å–∏–¥–∞–≥–∏ “≥–∞–º–∫–æ—Ä–ª–∏–∫ –ª–æ–π–∏“≥–∞–Ω–∏–Ω–≥ —à—É–±“≥–∞–ª–∏ –±—û–ª–∏—à–∏–≥–∞ —Å–∞–±–∞–± –±—û–ª–∞–¥–∏–º–∏' –Ω–æ–º–ª–∏–∫ –º–∞“õ–æ–ª–∞–Ω–∏ —û“õ–∏–± —á–∏“õ–∏–Ω–≥: \nhttps://telegra.ph/ArticleSharlifemyuz-09-03",
        'ru': "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å—Ç–∞—Ç—å–µ–π –æ –≤–ª–∏—è–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤ –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–∞–º–∏ –Ω–∞ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–∞–ª—è–ª—å–Ω–æ—Å—Ç–∏: \nhttps://telegra.ph/ArticleSharlifemy-09-03",
        'en': "Read the article about the impact of partnerships between crypto projects on their compliance with halal principles: \nhttps://sharlife.my/article/content/How_Halal_and_Haram_Crypto_Partnerships_Affect_Shariah_Compliance",
        'sa': "Read the article about the impact of partnerships between crypto projects on their compliance with halal principles: \nhttps://sharlife.my/article/content/How_Halal_and_Haram_Crypto_Partnerships_Affect_Shariah_Compliance",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('feature', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'feature';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://telegra.ph/Article2Sharlifemyuz-09-03",
        'ru': "https://telegra.ph/Article2sharlifemy-09-03",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('memtokens', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'memtokens';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://telegra.ph/Avoid-Buying-Meme-Coins---SharLifemy-09-03",
        'ru': "http://www.telegra.ph/Hukm-mem-koinov-Sharlife-07-08",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('airdrop', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'airdrop';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://telegra.ph/Is-Cryptocurrency-Airdrop-Halal-08-09",
        'ru': "https://telegra.ph/Is-Cryptocurrency-Airdrop-Halal-07-29",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('pos', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'pos';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://teletype.in/@hukmcrypto_bot/staking-halolmi",
        'ru': "https://teletype.in/@hukmcrypto_bot/SH-ANALYSE-OF-STAKING",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('zakot', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'zakot';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://teletype.in/@hukmcrypto_bot/zakat-on-cryptoassets",
        'ru': "https://teletype.in/@hukmcrypto_bot/zakat-on-cryptoassets",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('oltin', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'oltin';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://teletype.in/@hukmcrypto_bot/zoloto-valyuta-islama",
        'ru': "https://teletype.in/@hukmcrypto_bot/zoloto-valyuta-islama",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('t2egame', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 't2egame';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://teletype.in/@hukmcrypto_bot/sh-tap-to-earn",
        'ru': "https://teletype.in/@hukmcrypto_bot/sh-taptoearn",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('baykot', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'baykot';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://teletype.in/@hukmcrypto_bot/bNMAoIk4kQH",
        'ru': "https://teletype.in/@hukmcrypto_bot/cryptocurrencyisrael-invest-article",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('stablekoins', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'stablekoins';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://teletype.in/@hukmcrypto_bot/stablecoins-sharlife",
        'ru': "https://teletype.in/@hukmcrypto_bot/stablecoins-sharlife",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('clearinvest', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'clearinvest';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://teletype.in/@hukmcrypto_bot/Hbjv9cgzfbM",
        'ru': "https://teletype.in/@hukmcrypto_bot/perevodstatyish",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –°–µ–∫—à–∏–Ω –ø–æ –∞–∫–∞–¥–µ–º–∏–∏
bot.action('muftiyfazar', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.route = 'muftiyfazar';
    const lang = ctx.session.lang || 'uz';

    const buttonLabels = {
        'uz': 'üîô Orqaga',
        'ru': 'üîô –ù–∞–∑–∞–¥',
        'en': 'üîô Back',
        'sa': 'üîô ÿÆŸÑŸÅ',
    };
    const buttonText = buttonLabels[lang];

    const bigtexts2 = {
        'uz': "https://teletype.in/@hukmcrypto_bot/are-mem-tokens-uz",
        'ru': "https://teletype.in/@hukmcrypto_bot/arememetokens-halal",
        'en': "",
        'sa': "",
    }
    const bigtext = bigtexts2[lang];

    try {
        await ctx.editMessageText(
            bigtext,
            Markup.inlineKeyboard([
                [Markup.button.callback(buttonText, 'articles')],
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
})
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–º–æ–π
bot.action('home', async (ctx) => {
    ctx.session.route = 'home';
    await homeMessageBuilder(ctx);
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
bot.on('text', async (ctx) => {
    let date = new Date()
    const chatId = ctx.chat.id;
    const lang = ctx.session.lang || 'uz';

    if (ctx.text == '/privacy') {
        await ctx.replyWithHTML('https://telegra.ph/privacy-bot-09-03');    
    }
    if (ctx.session.route === 'research') {
        const lang = ctx.session.lang || 'uz';
        const search = ctx.message.text.toLowerCase();
        
        const buttonLabels = {
            'uz': 'üîô Orqaga',
            'ru': 'üîô –ù–∞–∑–∞–¥',
            'en': 'üîô Back',
            'sa': 'üîô ÿÆŸÑŸÅ',
        };
        const buttonText = buttonLabels[lang];

        // await ctx.deleteMessage();

        let coin = coins.find(c => c.ticker.toLowerCase() === search);

        const statusText = {
            'uz': {
                halal: '<b> HALOL</b> üü¢',
                haram: '<b> HAROM</b> üî¥',
                questionable: '<b> SHUBHALIK</b> üü†'
            },
            'ru': {
                halal: '<b> –•–ê–õ–Ø–õ–¨</b> üü¢',
                haram: '<b> –•–ê–†–ê–ú</b> üî¥',
                questionable: '<b> –°–û–ú–ù–ò–¢–ï–õ–¨–ù–´–ô</b> üü†'
            },
            'en': {
                halal: '<b> HALAL</b> üü¢',
                haram: '<b> HARAM</b> üî¥',
                questionable: '<b> QUESTIONABLE</b> üü†'
            },
            'sa': {
                halal: '<b> ÿ≠ŸÑÿßŸÑ </b> üü¢',
                haram: '<b> ÿ≠ÿ±ÿßŸÖ</b> üî¥',
                questionable: '<b> ŸÖÿ¥ŸÉŸàŸÉ ŸÅŸäŸá</b> üü†'
            }
        }[lang];

        // const date = new Date().toLocaleDateString('en-GB');
        const date = new Date().toLocaleDateString();

        const message = coin
            ? {
                'uz': `üåê ${coin.project_name ? search.toUpperCase() + ' ' + coin.project_name : search.toUpperCase()} ${coin.description ? '\n\n' + coin.description : ''} \n\n${statusText[coin.shariah_status.toLowerCase()] == undefined ? coin.shariah_status : statusText[coin.shariah_status.toLowerCase()]} \n\n${coin.source && !coin.source.includes('t.me/CrypoIslam') && !coin.source.includes('@hukmcrypto_bot') ? 'Manba: ' + coin.source : '@hukmcrypto_bot'}`, 
                'ru': `üåê ${coin.project_name ? search.toUpperCase() + ' ' + coin.project_name : search.toUpperCase()} ${coin.description ? '\n\n' + coin.description : ''} \n\n${statusText[coin.shariah_status.toLowerCase()] == undefined ? coin.shariah_status : statusText[coin.shariah_status.toLowerCase()]} \n\n${coin.source && !coin.source.includes('t.me/CrypoIslam') && !coin.source.includes('@hukmcrypto_bot') ? '–ò—Å—Ç–æ—á–Ω–∏–∫: ' + coin.source : '@hukmcrypto_bot'}`,
                'en': `üåê ${coin.project_name ? search.toUpperCase() + ' ' + coin.project_name : search.toUpperCase()} ${coin.description ? '\n\n' + coin.description : ''} \n\n${statusText[coin.shariah_status.toLowerCase()] == undefined ? coin.shariah_status : statusText[coin.shariah_status.toLowerCase()]} \n\n${coin.source && !coin.source.includes('t.me/CrypoIslam') && !coin.source.includes('@hukmcrypto_bot') ? 'Source: ' + coin.source : '@hukmcrypto_bot'}`,
                'sa': `üåê ${coin.project_name ? search.toUpperCase() + ' ' + coin.project_name : search.toUpperCase()} ${coin.description ? '\n\n' + coin.description : ''} \n\n${statusText[coin.shariah_status.toLowerCase()] == undefined ? coin.shariah_status : statusText[coin.shariah_status.toLowerCase()]} \n\n${coin.source && !coin.source.includes('t.me/CrypoIslam') && !coin.source.includes('@hukmcrypto_bot') ? 'Source: ' + coin.source : '@hukmcrypto_bot'}`,
            }[lang]
            : {
                'uz': "üîò Ushbu token haqida ma'lumot topilmadi. \nBiroz keyinroq tekshirib ko'ring. \n\nü§ñ Botga siz izlamoqchi bo'lgan token tikerini yozing \n‚úÖ Misol uchun: \nüî∏ Bitcoin - BTC",
                'ru': "üîò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ. \n\nü§ñ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤ –±–æ—Ç–µ. \n‚úÖ –ù–∞–ø—Ä–∏–º–µ—Ä: \nüî∏ Bitcoin - BTC",
                'en': "üîò No information found about this token. \nTry again later. \n\nü§ñ Write the Token ticker you are looking for on the bot. \n‚úÖ For example: \nüî∏ Bitcoin - BTC",
                'sa': "üîò ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ≠ŸàŸÑ Ÿáÿ∞Ÿá ÿßŸÑÿπŸÖŸÑÿ© \nÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÅŸä ŸàŸÇÿ™ ŸÑÿßÿ≠ŸÇ.  \n\nü§ñ  ÿ£ÿ±ÿ≥ŸÑ ÿ¥ÿ±Ÿäÿ∑ ÿßŸÑÿ±ŸÖÿ≤ ÿßŸÑŸÖŸÖŸäÿ≤ ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸäŸá ŸÅŸä ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™. \n(‚úÖÿπŸÑŸâ ÿ≥ÿ®ŸäŸÑ ÿßŸÑŸÖÿ´ÿßŸÑ: üî∏Bitcoin - BTC )"
            }[lang];

        try {
            await ctx.replyWithHTML(message);
        } catch (error) {
            console.log('Error while getting result', error);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    async function sendMessage(user, botToken) {
        const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
        const payload = {
            chat_id: user.chatId,
            parse_mode: "html",
            text: ctx.session.textforuser,
        };

        while (true) {
            try {
                await axios.post(url, payload);
                console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', user);
                break; // –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
            } catch (error) {
                if (error.response && error.response.status === 429) {
                    console.warn('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.');
                    await new Promise(resolve => setTimeout(resolve, 5000)); // –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                    break; // –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
                }
            }
        }
    }
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    async function sendMessagesUz(usersJson) {
        const botToken = '7499671537:AAGi8ILE5ywAEIZ_uSLrFBlfPNuF9WRDbdw';
        for (const user of usersJson) {
            if (user.language == 'uz') {
                await sendMessage(user, botToken);
                await new Promise(resolve => setTimeout(resolve, 1500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            }
        }
        await ctx.replyWithHTML('Barcha foydalanuvchilarga habar yuborildi!');    
    }    
    async function sendMessagesRu(usersJson) {
        const botToken = '7499671537:AAGi8ILE5ywAEIZ_uSLrFBlfPNuF9WRDbdw';
        for (const user of usersJson) {
            if (user.language == 'ru') {
                await sendMessage(user, botToken);
                await new Promise(resolve => setTimeout(resolve, 1500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            }
        }
        await ctx.replyWithHTML('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!');    
    }    

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async function sendUsersCount(botToken, user) {
        const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
        const payload = {
            chat_id: 5104139343,
            parse_mode: "html",
            text: user,
        };

        while (true) {
            try {
                await axios.post(url, payload);
                break; // –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
            } catch (error) {
                if (error.response && error.response.status === 429) {
                    console.warn('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.');
                    await new Promise(resolve => setTimeout(resolve, 5000)); // –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                    break; // –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
                }
            }
        }
    }
    async function getUsers(usersJson) {
        const botToken = '7499671537:AAGi8ILE5ywAEIZ_uSLrFBlfPNuF9WRDbdw';
        for (const user of usersJson) {

            // –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await sendUsersCount(botToken, user);
            await new Promise(resolve => setTimeout(resolve, 1500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

        }

        await ctx.replyWithHTML('Barcha foydalanuvchilarga habar yuborildi!');    
    }    
    // if (ctx.message.text === 'getusers') {
    //     getUsers(usersJson)
    // }
    

    if (!ctx.session.lang && ctx.session.route != 'research' && chatId == 5104139343 && ctx.session.statusAdmin == undefined) {
        await ctx.replyWithHTML(`Avval tilni tanlang`);    
    }
    if (ctx.message.text == 'senduz' && ctx.session.lang && ctx.session.route != 'research' && chatId == 5104139343 && ctx.session.statusAdmin == undefined) {
        ctx.session.statusAdmin = 'senduz'
        await ctx.replyWithHTML(`Textni kiriting:`);    
    } else if (ctx.session.lang && ctx.session.route != 'research' && chatId == 5104139343 && ctx.session.statusAdmin == 'senduz' && ctx.message.text != 'yes' && ctx.message.text != 'no') {
        ctx.session.statusAdmin = 'gettextuz'
        ctx.session.textforuser = ctx.message.text 
        await ctx.replyWithHTML(`Text quyidagi ko'rinishga ega:`);    
        await ctx.replyWithHTML(`${ctx.message.text}`);    
        await ctx.replyWithHTML(`Tasdiqlash uchun "yes" yoki "no" so'zini kiriting`);    
        isSendSmsTest = true
    }   
    if (ctx.message.text == 'sendru' && ctx.session.lang && ctx.session.route != 'research' && chatId == 5104139343 && ctx.session.statusAdmin == undefined) {
        ctx.session.statusAdmin = 'sendru'
        await ctx.replyWithHTML(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:`);    
    } else if (ctx.session.lang && ctx.session.route != 'research' && chatId == 5104139343 && ctx.session.statusAdmin == 'sendru' && ctx.message.text != 'yes' && ctx.message.text != 'no') {
        ctx.session.statusAdmin = 'gettextru'
        ctx.session.textforuser = ctx.message.text 
        await ctx.replyWithHTML(`–¢–µ–∫—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:`);    
        await ctx.replyWithHTML(`${ctx.message.text}`);    
        await ctx.replyWithHTML(`–í–≤–µ–¥–∏—Ç–µ ¬´yes¬ª –∏–ª–∏ ¬´no¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`);    
        isSendSmsTest = true
    }   

    if (ctx.message.text == 'yes' && ctx.session.statusAdmin.includes('gettext') && ctx.session.lang && ctx.session.route != 'research' && chatId == 5104139343) {
        if (ctx.session.statusAdmin == 'gettextuz') {
            await ctx.replyWithHTML(`Quyidagi ko'rinishda jo'natildi: \n\n`);    
            await ctx.replyWithHTML(ctx.session.textforuser);  
            sendMessagesUz(usersJson)
        }
        if (ctx.session.statusAdmin == 'gettextru') {
            await ctx.replyWithHTML(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∏–∂–µ: \n\n`);    
            await ctx.replyWithHTML(ctx.session.textforuser);  
            sendMessagesRu(usersJson)
        }
        ctx.session.statusAdmin = ''
    }    
    if (ctx.message.text == 'no' && ctx.session.statusAdmin.includes('gettext') && ctx.session.lang && ctx.session.route != 'research' && chatId == 5104139343) {
        ctx.session.statusAdmin = ''
        await ctx.replyWithHTML(`Bekor qilindi.`);    
    }    
    // if (+ctx.message.text == date.getMinutes() && ctx.session.route != 'research' && chatId == 5104139343) {
    //     sendMessages(usersJson);
    // }
});

module.exports = { bot }

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
bot.catch((e, ctx) => {
    console.log(e, ctx);
}).launch();